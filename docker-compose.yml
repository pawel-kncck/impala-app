services:
  frontend:
    build: ./frontend
    ports:
      - '3000:80'
    depends_on:
      backend:
        condition: service_healthy
    networks: # Add this
      - impala-net

  backend:
    build: ./backend
    restart: always # Add this
    ports:
      - '5001:5000'
    environment:
      DATABASE_URL: 'postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/mydatabase'
      MONGO_DATABASE_URL: 'mongodb://mongo:27017/'
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_started
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5000/api/hello']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: # Add this
      - impala-net

  db:
    image: postgres:13-alpine
    restart: always # Add this
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d mydatabase']
      interval: 10s
      timeout: 5s
      retries: 5
    networks: # Add this
      - impala-net

  mongo:
    image: mongo:latest
    restart: always # Add this
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db
    networks: # Add this
      - impala-net

volumes:
  db_data:
  mongo_data:

# Define the network at the top level
networks:
  impala-net:
    driver: bridge
